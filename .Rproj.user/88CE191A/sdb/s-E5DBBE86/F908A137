{
    "collab_server" : "",
    "contents" : "// MIT License\n// Copyright (c) 2019 Vincent Runge\n\n#include<Rcpp.h>\n// Enable C++11 via this plugin (Rcpp 0.10.3 or later)\n// [[Rcpp::plugins(cpp11)]]\n\n#include<math.h>\n#include\"Omega.h\"\n#include\"peltcc_template.h\" //Marco Pascucci code\nusing namespace Rcpp;\nusing namespace std;\n\n// [[Rcpp::export]]\nList slopeOPtransfer(std::vector<double> data, std::vector<double> states, double penalty, std::string constraint = \"null\", double minAngle = 0, std::string type = \"channel\")\n{\n  Omega omega = Omega(states, penalty, data.size());\n  //DIFFERENT PRUNING\n  if(type == \"null\" && constraint == \"null\"){omega.algo(data);}\n  if(type == \"channel\" && constraint == \"null\"){omega.algoChannel(data);}\n  if(type == \"pruning\" && constraint == \"null\"){omega.algoPruning(data);}\n  if(type == \"pruning2\" && constraint == \"null\"){omega.algoPruning2(data);}\n\n  //DIFFERENT CONSTRAINTS\n  if(constraint == \"up\"){omega.algoChannelUP(data);}\n  if(constraint == \"updown\"){omega.algoUPDOWM(data);}\n  if(constraint == \"smoothing\"){omega.algoSMOOTHING(data, minAngle);}\n\n  omega.backtracking(data.size());\n\n  /// RETURN\n  List res = List::create(\n    _[\"changepoints\"] = omega.GetChangepoints(),\n    _[\"parameters\"] = omega.GetParameters(),\n    _[\"globalCost\"] = omega.GetGlobalCost(),\n    _[\"pruningPower\"] = omega.GetPruning()\n  );\n  return res;\n}\n\n\n// MIT License\n// Copyright (c) 2019 Marco Pascucci\n\n// [[Rcpp::export]]\nList linearOP(std::vector<double> x, std::vector<double> data, double penalty, bool cc = false)\n{\n  if (x.size() != data.size()) {\n    stop(\"x and y must have the same length.\");\n  }\n\n  PeltResult<double,double> pr;\n  if(cc == false){\n    pr = pelt(x,data,penalty);\n  } else {\n    pr = peltcc(x,data,penalty);\n  }\n\n  for(unsigned int i = 0; i < pr.cp.size(); i++){\n    pr.cp[i] = pr.cp[i] + 1;\n  }\n\n  // RETURN\n  List res = List::create(\n    _[\"cp_indexes\"] = pr.cp,\n    _[\"x\"] = pr.x,\n    _[\"y\"] = pr.y,\n    _[\"globalCost\"] = pr.cost\n  );\n\n  return(res);\n}\n",
    "created" : 1561449787311.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2632161149",
    "id" : "F908A137",
    "lastKnownWriteTime" : 1562835053,
    "last_content_update" : 1562835053124,
    "path" : "C:/slopeOP/src/slopeOP.cpp",
    "project_path" : "src/slopeOP.cpp",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}