if(temp%%2 == 0)
{
vec <- c(vec, temp/2)
temp <- temp/2
}
else
{
vec <- c(vec, 3*temp-1)
temp <- 3*temp-1
}
it = it + 1
}
return(vec)
}
n <- 5
v <- Collatz(n)
plotCollatz(v)
v <- Collatz2(n)
Collatz2 <- function(start = 10, stop = 10^3)
{
it <- 0
vec <- start
temp <- start
while(temp != 1 && it < stop)
{
if(temp%%2 == 0)
{
vec <- c(vec, temp/2)
temp <- temp/2
}
else
{
vec <- c(vec, 3*temp-1)
temp <- 3*temp-1
}
it = it + 1
}
return(vec)
}
n <- 5
v <- Collatz(n)
plotCollatz(v)
v <- Collatz2(n)
plotCollatz(v)
v
Collatz2 <- function(start = 10, stop = 10^3)
{
it <- 0
vec <- start
temp <- start
while(temp != 5 && it < stop)
{
if(temp%%2 == 0)
{
vec <- c(vec, temp/2)
temp <- temp/2
}
else
{
vec <- c(vec, 3*temp-1)
temp <- 3*temp-1
}
it = it + 1
}
return(vec)
}
n <- 5
v <- Collatz(n)
plotCollatz(v)
v <- Collatz2(n)
plotCollatz(v)
n <- 50
v <- Collatz(n)
plotCollatz(v)
v <- Collatz2(n)
plotCollatz(v)
n <- 50
v <- Collatz(n)
plotCollatz(v)
v <- Collatz2(n)
plotCollatz(v)
v
n <- 12
v <- Collatz(n)
plotCollatz(v)
v <- Collatz2(n)
plotCollatz(v)
v
n <- 111
v <- Collatz(n)
plotCollatz(v)
v <- Collatz2(n)
plotCollatz(v)
v
n <- 1111
v <- Collatz(n)
plotCollatz(v)
v <- Collatz2(n)
plotCollatz(v)
v
n <- 11111
v <- Collatz(n)
plotCollatz(v)
v <- Collatz2(n)
plotCollatz(v)
v
n <- 33
v <- Collatz(n)
plotCollatz(v)
v <- Collatz2(n)
plotCollatz(v)
v
n <- 32
v <- Collatz(n)
plotCollatz(v)
v <- Collatz2(n)
plotCollatz(v)
v
n <- 31
v <- Collatz(n)
plotCollatz(v)
v <- Collatz2(n)
plotCollatz(v)
v
Collatz3 <- function(start = 10, stop = 10^3)
{
it <- 0
vec <- start
temp <- start
while(temp != 5 && it < stop)
{
if(temp%%2 == 0)
{
vec <- c(vec, temp/2)
temp <- temp/2
}
else
{
vec <- c(vec, 3*temp+3)
temp <- 3*temp+3
}
it = it + 1
}
return(vec)
}
n <- 31
v <- Collatz(n)
plotCollatz(v)
v <- Collatz3(n)
plotCollatz(v)
v
n <- 30
v <- Collatz(n)
plotCollatz(v)
v <- Collatz3(n)
plotCollatz(v)
v
n <- 95
v <- Collatz(n)
plotCollatz(v)
v <- Collatz3(n)
plotCollatz(v)
v
Collatz3 <- function(start = 10, stop = 10^3)
{
it <- 0
vec <- start
temp <- start
while(temp != 3 && it < stop)
{
if(temp%%2 == 0)
{
vec <- c(vec, temp/2)
temp <- temp/2
}
else
{
vec <- c(vec, 3*temp+3)
temp <- 3*temp+3
}
it = it + 1
}
return(vec)
}
n <- 95
v <- Collatz(n)
plotCollatz(v)
v <- Collatz3(n)
plotCollatz(v)
v
n <- 95
v <- Collatz(n)
plotCollatz(v)
v <- Collatz3(n)
plotCollatz(v)
v
n <- 91
v <- Collatz(n)
plotCollatz(v)
v <- Collatz3(n)
plotCollatz(v)
v
n <- 90
v <- Collatz(n)
plotCollatz(v)
v <- Collatz3(n)
plotCollatz(v)
v
n <- 111
v <- Collatz(n)
plotCollatz(v)
v <- Collatz3(n)
plotCollatz(v)
v
n <- 155
v <- Collatz(n)
plotCollatz(v)
v <- Collatz3(n)
plotCollatz(v)
v
CollatzLength3 <- function(numberMin = 5, numberMax = 10)
{
res <- NULL
for(i in numberMin:numberMax)
{
res <- c(res, length(Collatz3(i)))
}
return(res)
}
w <- CollatzLength(1,1000)
plot(w, type = "p", lty = 1, pch = 20)
w <- CollatzLength3(1,1000)
plot(w, type = "p", lty = 1, pch = 20)
w <- CollatzLength(1,10000)
plot(w, type = "p", lty = 1, pch = 20)
w <- CollatzLength3(1,10000)
plot(w, type = "p", lty = 1, pch = 20)
w <- CollatzLength(10000,20000)
plot(w, type = "p", lty = 1, pch = 20)
w <- CollatzLength3(10000,20000)
plot(w, type = "p", lty = 1, pch = 20)
w1 <- CollatzLength(10000,20000)
plot(w1, type = "p", lty = 1, pch = 20)
w2 <- CollatzLength3(10000,20000)
plot(w2, type = "p", lty = 1, pch = 20)
plot(w1+w2, type = "p", lty = 1, pch = 20)
plot(w1-w2, type = "p", lty = 1, pch = 20)
Collatz5 <- function(start = 10, stop = 10^3)
{
it <- 0
vec <- start
temp <- start
while(temp != 3 && it < stop)
{
if(temp%%2 == 0)
{
vec <- c(vec, temp/2)
temp <- temp/2
}
else
{
vec <- c(vec, 3*temp+5)
temp <- 3*temp+5
}
it = it + 1
}
return(vec)
}
n <- 155
v <- Collatz(n)
plotCollatz(v)
v <- Collatz5(n)
plotCollatz(v)
v
n <- 15
v <- Collatz(n)
plotCollatz(v)
v <- Collatz5(n)
plotCollatz(v)
v
Collatz5 <- function(start = 10, stop = 10^3)
{
it <- 0
vec <- start
temp <- start
while(temp != 5 && it < stop)
{
if(temp%%2 == 0)
{
vec <- c(vec, temp/2)
temp <- temp/2
}
else
{
vec <- c(vec, 3*temp+5)
temp <- 3*temp+5
}
it = it + 1
}
return(vec)
}
n <- 15
v <- Collatz(n)
plotCollatz(v)
v <- Collatz5(n)
plotCollatz(v)
v
n <- 15
v <- Collatz(n)
plotCollatz(v)
v <- Collatz5(n)
plotCollatz(v)
v
n <- 151
v <- Collatz(n)
plotCollatz(v)
v <- Collatz5(n)
plotCollatz(v)
v
n <- 112
v <- Collatz(n)
plotCollatz(v)
v <- Collatz5(n)
plotCollatz(v)
v
n <- 11
v <- Collatz(n)
plotCollatz(v)
v <- Collatz5(n)
plotCollatz(v)
v
n <- 71
v <- Collatz(n)
plotCollatz(v)
v <- Collatz5(n)
plotCollatz(v)
v
CollatzLength3 <- function(numberMin = 5, numberMax = 10)
{
res <- NULL
for(i in numberMin:numberMax)
{
res <- c(res, length(Collatz3(i)))
}
return(res)
}
w1 <- CollatzLength(10000,20000)
plot(w1, type = "p", lty = 1, pch = 20)
w2 <- CollatzLength3(10000,20000)
plot(w2, type = "p", lty = 1, pch = 20)
devtools::install_github("vrunge/listChallenge")
listChallenge(length = 10^4, batch = 10^3, prob = 0.1, method = "std")
library(listChallenge)
listChallenge(length = 10^4, batch = 10^3, prob = 0.1, method = "std")
?listChallenge
listChallenge(length = 10^4, batch = 10^3, prob = 0.1, method = "doublylinkedlist")
l1 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "std")
l2 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "mylist")
l3 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "mylist2")
l4 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "doublylinkedlist")
l5 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "doublylinkedlist2")
l1$time
l2$time
l3$time
l4$time
l5$time
l1 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "std")
l2 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "mylist")
l3 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "mylist2")
l4 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "doublylinkedlist")
l5 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "doublylinkedlist2")
l1$time
l2$time
l3$time
l4$time
l5$time
l1 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "std")
l2 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "mylist")
l3 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "mylist2")
l4 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "doublylinkedlist")
l5 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "doublylinkedlist2")
l1$time
l2$time
l3$time
l4$time
l5$time
devtools::install_github("vrunge/listChallenge")
devtools::install_github("vrunge/listChallenge", force = TRUE)
devtools::install_github("vrunge/listChallenge", force = TRUE)
l1 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "std")
l2 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "mylist")
l3 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "mylist2")
l4 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "doublylinkedlist")
l5 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "doublylinkedlist2")
l1$time
l2$time
l3$time
l4$time
l5$time
l1 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "std")
l2 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "vr1")
l3 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "vr2")
l4 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "al1")
l5 <- listChallenge(length = 10^7, batch = 10^4, prob = 0.1, method = "al2")
l1$time
l2$time
l3$time
l4$time
l5$time
l2
library(slopeOP)
library(slopeOP)
library(slopeOP)
test
test <- TRUE
test.bool()
is.boolean(test)
is.logical(test)
is.logical(!test)
!test
is.logical(3)
is.logical(1)
is.logical(0)
library(slopeOP)
library(slopeOP)
library(slopeOP)
library(slopeOP)
library(slopeOP)
library(slopeOP)
m <- data.frame(bench_batch(10^5, seq(1,100,1), 0.1, 3, methods = c("std","vr2","vr1","al1", "al2")))
bench_batch <- function(length, batch_seq, prob, each, methods = c("std","vr1","vr2","al1","al2"))
{
matParam <- expand.grid(length, batch_seq, prob, 1:each, methods)
return (do.call(rbind, lapply( 1:nrow(matParam) ,
function(i){one.simu(matParam[i,1],matParam[i,2], matParam[i,3], toString(matParam[i,5]))
})))
}
one.simu <- function(length, batch, prob, method)
{
res <- listChallenge(length=length, batch=batch, prob=prob, method=method)
c(batch, method, res$time)
}
library(listChallenge)
library(ggplot2)
library(ggrepel)
library(dplyr)
m <- data.frame(bench_batch(10^5, seq(1,100,1), 0.1, 3, methods = c("std","vr2","vr1","al1", "al2")))
colnames(m) <- c("batch", "method", "time.s")
m$batch <- as.numeric(as.character(m$batch))
m$time.s <- as.numeric(as.character(m$time.s))
max_batch = 100 #changer la position des labels
ggplot(m,
aes(x=batch, y=time.s, group=method, color=factor(method), fill = factor(method), label=method))+
stat_summary(fun.data = 'mean_sdl', fun.args = list(mult = 1), geom = 'smooth', se = TRUE, alpha=0.2)+
geom_label_repel(data=m %>% group_by(method, batch) %>% summarise(mean.time=mean(time.s)) %>% filter(batch==max_batch), aes(x=batch, y = mean.time), segment.color="black",size=4,fontface = 'bold', color="white")+
theme_bw()+
theme(legend.position = "none")
batch
one.simu <- function(length, batch, prob, method)
{
res <- listChallenge(length=length, batch=batch, prob=prob, method=method)
c(batch, method, res$time)
}
m <- data.frame(bench_batch(10^5, seq(1,100,1), 0.1, 3, methods = c("std","vr2","vr1","al1", "al2")))
colnames(m) <- c("batch", "method", "time.s")
m$batch <- as.numeric(as.character(m$batch))
m$time.s <- as.numeric(as.character(m$time.s))
max_batch = 100 #changer la position des labels
ggplot(m,
aes(x=batch, y=time.s, group=method, color=factor(method), fill = factor(method), label=method))+
stat_summary(fun.data = 'mean_sdl', fun.args = list(mult = 1), geom = 'smooth', se = TRUE, alpha=0.2)+
geom_label_repel(data=m %>% group_by(method, batch) %>% summarise(mean.time=mean(time.s)) %>% filter(batch==max_batch), aes(x=batch, y = mean.time), segment.color="black",size=4,fontface = 'bold', color="white")+
theme_bw()+
theme(legend.position = "none")
library(ggrepel)
library(dplyr)
ggplot(m,
aes(x=batch, y=time.s, group=method, color=factor(method), fill = factor(method), label=method))+
stat_summary(fun.data = 'mean_sdl', fun.args = list(mult = 1), geom = 'smooth', se = TRUE, alpha=0.2)+
geom_label_repel(data=m %>% group_by(method, batch) %>% summarise(mean.time=mean(time.s)) %>% filter(batch==max_batch), aes(x=batch, y = mean.time), segment.color="black",size=4,fontface = 'bold', color="white")+
theme_bw()+
theme(legend.position = "none")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(m,
aes(x=batch, y=time.s, group=method, color=factor(method), fill = factor(method), label=method))+
stat_summary(fun.data = 'mean_sdl', fun.args = list(mult = 1), geom = 'smooth', se = TRUE, alpha=0.2)+
geom_label_repel(data=m %>% group_by(method, batch) %>% summarise(mean.time=mean(time.s)) %>% filter(batch==max_batch), aes(x=batch, y = mean.time), segment.color="black",size=4,fontface = 'bold', color="white")+
theme_bw()+
theme(legend.position = "none")
library(ggplot2)
library(ggplot2)
library(ggrepel)
library(dplyr)
library(listChallenge)
ggplot(m,
aes(x=batch, y=time.s, group=method, color=factor(method), fill = factor(method), label=method))+
stat_summary(fun.data = 'mean_sdl', fun.args = list(mult = 1), geom = 'smooth', se = TRUE, alpha=0.2)+
geom_label_repel(data=m %>% group_by(method, batch) %>% summarise(mean.time=mean(time.s)) %>% filter(batch==max_batch), aes(x=batch, y = mean.time), segment.color="black",size=4,fontface = 'bold', color="white")+
theme_bw()+
theme(legend.position = "none")
time.s
m
m[,"std"]
m$method
m[,m$method == "std"]
library(slopeOP)
library(slopeOP)
library(slopeOP)
